import 'package:flutter/material.dart';
import 'package:pedometer/pedometer.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:async';
import 'dart:io' show Platform;

class ActivityTrackerScreen extends StatefulWidget {
  const ActivityTrackerScreen({Key? key}) : super(key: key);

  @override
  _ActivityTrackerScreenState createState() => _ActivityTrackerScreenState();
}

class _ActivityTrackerScreenState extends State<ActivityTrackerScreen>
    with SingleTickerProviderStateMixin {
  int _stepCount = 0;
  int _initialStepCount = 0;
  double _distance = 0.0;
  double _calories = 0.0;
  double _stepLength = 0.78;
  double _weight = 70.0;
  int _targetSteps = 10000;
  DateTime _lastUpdatedDate = DateTime.now();

  StreamSubscription<StepCount>? _stepStream;
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _requestActivityRecognitionPermission();
  }

  Future<void> _requestActivityRecognitionPermission() async {
    if (Platform.isAndroid) {
      final status = await Permission.activityRecognition.request();
      if (status.isGranted) {
        _startTracking();
      } else if (status.isDenied) {
        print("ACTIVITY_RECOGNITION permission denied.");
      } else if (status.isPermanentlyDenied) {
        print("ACTIVITY_RECOGNITION permission permanently denied.");
        await openAppSettings();
      }
    } else {
      _startTracking();
    }
  }

  void _startTracking() {
    _stepStream = Pedometer.stepCountStream.listen((StepCount event) {
      final currentDate = DateTime.now();
      if (_lastUpdatedDate.day != currentDate.day ||
          _lastUpdatedDate.month != currentDate.month ||
          _lastUpdatedDate.year != currentDate.year) {
        _resetData();
      }
      if (_initialStepCount == 0) {
        _initialStepCount = event.steps;
      }
      setState(() {
        _stepCount = event.steps - _initialStepCount;
        _distance = (_stepCount * _stepLength) / 1000;
        _calculateCalories();
        _lastUpdatedDate = currentDate;
      });
    }, onError: (error) {
      print('Step tracking error: $error');
    });
  }

  void _resetData() {
    setState(() {
      _stepCount = 0;
      _initialStepCount = 0;
      _distance = 0.0;
      _calories = 0.0;
    });
    print("Data reset at midnight.");
  }

  void _calculateCalories() {
    double caloriesPerStep = _weight * 0.0005;
    double caloriesFromSteps = _stepCount * caloriesPerStep;
    setState(() {
      _calories = caloriesFromSteps;
    });
  }

  @override
  void dispose() {
    _stepStream?.cancel();
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        title: const Text(
          'Activity',
          style: TextStyle(
            color: Colors.black,
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(text: 'Tracker'),
            Tab(text: 'Settings'),
          ],
          labelColor: Colors.black,
          unselectedLabelColor: Colors.black54,
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildTrackerTab(),
          _buildSettingsTab(),
        ],
      ),
    );
  }

  Widget _buildTrackerTab() {
    double progress = (_stepCount / _targetSteps) * 100;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        const SizedBox(height: 30),
        Center(
          child: Stack(
            alignment: Alignment.center,
            children: [
              CustomPaint(
                size: const Size(260, 260),
                painter: CircleProgressPainter(progress: progress),
              ),
              Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    '$_stepCount / $_targetSteps',
                    style: const TextStyle(
                      fontSize: 28,
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                    ),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    'Steps',
                    style: TextStyle(
                      fontSize: 18,
                      color: Colors.black54,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
        const SizedBox(height: 30),
        Container(
          padding: const EdgeInsets.all(20),
          margin: const EdgeInsets.symmetric(horizontal: 20),
          decoration: BoxDecoration(
            color: const Color(0xFF98D8AA),
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 10,
                spreadRadius: 2,
                offset: const Offset(0, 5),
              ),
            ],
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              InfoCard(
                title: 'Calories Burned',
                value: '${_calories.toStringAsFixed(2)} Kcal',
                icon: Icons.local_fire_department,
              ),
              InfoCard(
                title: 'Distance',
                value: '${_distance.toStringAsFixed(2)} km',
                icon: Icons.directions_walk,
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildSettingsTab() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Step Goal Settings',
            style: TextStyle(
                fontSize: 22, fontWeight: FontWeight.bold, color: Colors.black),
          ),
          const SizedBox(height: 20),
          Row(
            children: [
              const Text('Daily Step Goal:',
                  style: TextStyle(fontSize: 18, color: Colors.black)),
              const SizedBox(width: 10),
              Expanded(
                child: TextField(
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(
                    border: OutlineInputBorder(),
                    hintText: 'Enter step goal',
                  ),
                  onChanged: (value) {
                    setState(() {
                      _targetSteps = int.tryParse(value) ?? 10000;
                    });
                  },
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF98D8AA),
              foregroundColor: Colors.black,
            ),
            onPressed: () {
              // Save the new step goal
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Step goal updated!')),
              );
            },
            child: const Text('Save Step Goal'),
          ),
        ],
      ),
    );
  }
}

class CircleProgressPainter extends CustomPainter {
  final double progress;

  CircleProgressPainter({required this.progress});

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(size.width / 2, size.height / 2);
    final radius = size.width / 2 - 6;

    final trackPaint = Paint()
      ..color = const Color(0xFF98D8AA).withOpacity(0.3)
      ..style = PaintingStyle.stroke
      ..strokeWidth = 12;

    canvas.drawCircle(center, radius, trackPaint);

    final progressPaint = Paint()
      ..shader = const LinearGradient(
        colors: [Color(0xFF98D8AA), Color(0xFF7CBB9F)],
      ).createShader(Rect.fromCircle(center: center, radius: radius))
      ..style = PaintingStyle.stroke
      ..strokeCap = StrokeCap.round
      ..strokeWidth = 12;

    final startAngle = -90.0 * 3.14159 / 180;
    final sweepAngle = 2 * 3.14159 * (progress / 100);

    canvas.drawArc(
      Rect.fromCircle(center: center, radius: radius),
      startAngle,
      sweepAngle,
      false,
      progressPaint,
    );
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return true;
  }
}

class InfoCard extends StatelessWidget {
  final String title;
  final String value;
  final IconData icon;

  const InfoCard({
    Key? key,
    required this.title,
    required this.value,
    required this.icon,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Icon(icon, color: Colors.white, size: 28),
        const SizedBox(height: 8),
        Text(
          value,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
        Text(
          title,
          style: const TextStyle(
            fontSize: 14,
            color: Colors.white70,
          ),
        ),
      ],
    );
  }
}
